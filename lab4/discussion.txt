1. What registers are read from and written to in each of the interface
    methods of mkMyConflictFifo?

notEmpty
    read: empty
    written:
first
    read: data, empty, deqP
    written:
deq
    read: empty, enqP, deqP
    written: empty, deqP, full
notFull
    read: full
    written:
enq
    read: full, enqP, deqP
    written: empty, full, enqP, data
clear
    read:
    written: enqP, deqP, empty, full



2. Fill the conflict Matrix for mkMyConflictFifo.

           notEmpty   first   deq   notFull   enq   clear
         +----------+-------+-----+---------+-----+-------+
notEmpty |   CF     |  CF   | CF  |   CF    | CF  |  CF   |
         +----------+-------+-----+---------+-----+-------+
first    |   CF     |  CF   | CF  |   CF    | CF  |  CF   |
         +----------+-------+-----+---------+-----+-------+
deq      |   CF     |  CF   | C   |   CF    | C   |  C    |
         +----------+-------+-----+---------+-----+-------+
notFull  |   CF     |  CF   | CF  |   CF    | CF  |  CF   |
         +----------+-------+-----+---------+-----+-------+
enq      |   CF     |  CF   | C   |   CF    | C   |  C    |
         +----------+-------+-----+---------+-----+-------+
clear    |   CF     |  CF   | C   |   CF    | C   |  C    |
         +----------+-------+-----+---------+-----+-------+



3. Which conflicts from mkMyConflictFifo do not match the conflict-free FIFO
    scheduling constraints?



4. In your design of the clear method in mkMyCFFifo, how did you force the
    scheduling constraint {enq, deq} < clear?



